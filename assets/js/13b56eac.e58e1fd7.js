"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[847],{3919:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Attacks/Events","title":"Exploit addEventListener","description":"Although the content script is isolated, there is an important connection between Isolated and Main Worlds - these are events. Let\'s imagine that the extension contains the following code in the content script:","source":"@site/docs/Attacks/Events.mdx","sourceDirName":"Attacks","slug":"/Attacks/Events","permalink":"/Attacks/Events","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Attack","permalink":"/category/attack"},"next":{"title":"Exploit Messages","permalink":"/Attacks/Message"}}');var o=n(4848),i=n(8453);const a={sidebar_position:1},r="Exploit addEventListener",c={},d=[{value:"window events",id:"window-events",level:2},{value:"How to Fix",id:"how-to-fix",level:2}];function l(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"exploit-addeventlistener",children:"Exploit addEventListener"})}),"\n",(0,o.jsx)(t.p,{children:"Although the content script is isolated, there is an important connection between Isolated and Main Worlds - these are events. Let's imagine that the extension contains the following code in the content script:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:'const button = document.createElement("button");\nbutton.innerText="APPROVE";\nbutton.id = "approve"\nbutton.addEventListener("click",(event)=>{\n    console.log("Clicked!");\n    // ...\n})\ndocument.body.appendChild(button);\n'})}),"\n",(0,o.jsxs)(t.p,{children:["In fact, the drawback of this approach is that we can dispatch an event from the ",(0,o.jsx)(t.em,{children:"Main World"})," of our site on this button:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:'document.getElementById("approve").dispatchEvent(new Event("click"))\n'})}),"\n",(0,o.jsx)(t.p,{children:"Running such code will show you that the registered listener has been executed."}),"\n",(0,o.jsx)(t.h2,{id:"window-events",children:"window events"}),"\n",(0,o.jsx)(t.p,{children:"It is important to understand that this also applies to window and document events (except for error events, which are not passed between contexts in Chrome).\nFor example, the extension can register an action in the content script when a key combination is pressed:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"    document.addEventListener('keydown', function(event) {\n        if (event.ctrlKey && event.key === 'o') {\n            event.preventDefault();\n            console.log('Ctrl + O was pressed');\n            //...\n        }\n    });\n"})}),"\n",(0,o.jsx)(t.p,{children:"In this case, you can simply run:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const event = new KeyboardEvent(\"keydown\",{key: 'o',ctrlKey: true})\ndocument.dispatchEvent(event)\n"})}),"\n",(0,o.jsxs)(t.p,{children:["It is also important to understand that many text values in events are not filtered, meaning we can safely trigger a key press with the name ",(0,o.jsx)(t.code,{children:"__proto__"})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"new KeyboardEvent(\"keydown\",{key: '__proto__',ctrlKey: true})\n"})}),"\n",(0,o.jsx)(t.h2,{id:"how-to-fix",children:"How to Fix"}),"\n",(0,o.jsxs)(t.p,{children:["If you are not familiar with client-side security, you might think that fixing this bug is quite complex.\nHowever, to fix it, you just need to use ",(0,o.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted",children:(0,o.jsx)(t.code,{children:"isTrusted"})}),":"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"isTrusted"})," read-only property of the Event interface is a boolean value that is true when the event was generated by the user agent (including via user actions and programmatic methods such as ",(0,o.jsx)(t.code,{children:"HTMLElement.focus()"}),")"]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"So a valid check should look like this:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"    document.addEventListener('keydown', function(event) {\n        if (event.isTrusted && event.ctrlKey && event.key === 'o') {\n            event.preventDefault();\n            console.log('Ctrl + O was pressed');\n            //...\n        }\n    });\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(6540);const o={},i=s.createContext(o);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);