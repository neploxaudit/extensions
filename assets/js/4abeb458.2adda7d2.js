"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[936],{1094:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"Attacks/Storage to UXSS","title":"Unsafe storage to UXSS","description":"Sometimes developers forget that chrome.storage.local is the same for all sites where the content script is loaded.","source":"@site/docs/Attacks/Storage to UXSS.md","sourceDirName":"Attacks","slug":"/Attacks/Storage to UXSS","permalink":"/Attacks/Storage to UXSS","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Clickjacking","permalink":"/Attacks/Clickjacking"},"next":{"title":"More","permalink":"/category/more"}}');var s=t(4848),o=t(8453);const r={sidebar_position:5},i="Unsafe storage to UXSS",c={},d=[{value:"Namespace confusion",id:"namespace-confusion",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"unsafe-storage-to-uxss",children:"Unsafe storage to UXSS"})}),"\n",(0,s.jsxs)(n.p,{children:["Sometimes developers forget that ",(0,s.jsx)(n.code,{children:"chrome.storage.local"})," is the same for all sites where the ",(0,s.jsx)(n.code,{children:"content script"})," is loaded."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'window.addEventListener("message", (event) => {\n    if (event.source !== window) return;\n\n    if (event.data.action === "setUsername") {\n        chrome.storage.local.set({ ["Username"]: event.data.value }, () => {\n            console.log("Storage set successfully");\n        });\n    }\n});\n\ndocument.addEventListener("DOMContentLoaded", (event) => {\n    chrome.storage.local.get("Username", (data) => {\n        if (data.Username) {\n            var host = document.createElement(\'div\');\n            host.innerHTML = `<h1>${data.Username}</h1>`\n            document.body.appendChild(host);\n        }\n    });\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This is a fairly simple example, but it shows a very important thing. You need to sanitize data inserted into ",(0,s.jsx)(n.code,{children:"chrome.storage"}),". Because data received from one ",(0,s.jsx)(n.code,{children:"origin"})," will be applied across all domains. In fact, this allows for achieving UXSS."]}),"\n",(0,s.jsx)(n.h2,{id:"namespace-confusion",children:"Namespace confusion"}),"\n",(0,s.jsx)(n.p,{children:"Usually, extensions are injected into HTML pages, but they can also be injected into SVG files, which can help you achieve UXSS.\nA simplified real example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'window.addEventListener("message", (event) => {\n    if (event.source !== window) return;\n\n    if (event.data.action === "setTheme") {\n        var style_container = document.createElement(\'style\');\n        style_container.innerText = `.classname{\n            background: url(${event.data.theme});\n        }`;\n        chrome.storage.local.set({ ["theme"]: style_container.outerHTML }, () => {\n            console.log("Storage set successfully");\n        });\n    }\n});\n\ndocument.addEventListener("DOMContentLoaded", (event) => {\n    chrome.storage.local.get("theme", (data) => {\n        if (data.theme) {\n            var host = document.createElement(\'div\');\n            host.innerHTML = `${data.theme} ...`;\n            document.body.appendChild(host);\n        }\n    });\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:"In this case, it seems that the maximum you can achieve is CSS injection on any site where the extension is opened (which is already quite good) - however, you can achieve full XSS."}),"\n",(0,s.jsxs)(n.p,{children:["The fact is that we can set the ",(0,s.jsx)(n.code,{children:"theme"})," to:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<img src="x" onerror="alert()"></img>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["After that, the attacker can direct the user to an SVG document on a third-party site, for example, the company's logo. In the SVG context, the ",(0,s.jsx)(n.code,{children:"<img>"})," tag inside the ",(0,s.jsx)(n.code,{children:"<style>"})," tag will be applied, and we will get XSS."]}),"\n",(0,s.jsx)(n.p,{children:"You also need to understand that SVG documents, in general, have a number of differences from HTML documents - for example, there is no document.head, and so on. Perhaps this can help you."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var a=t(6540);const s={},o=a.createContext(s);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);